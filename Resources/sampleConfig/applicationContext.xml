<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">
<beans>

<!-- 

  Utilisation :
  
  On défini un fichier de configuration de base qui contient toutes les propriétés qui ne dépendent pas de la machine
  dans un fichier dans la propriété 'location'
    
  On met les fichiers qui dépendent de la machine et/ou du serveur d'application dans 
  la propriété prefix.
  
  exportPath défini l'endroit ou le fichier de configuration de la machine courante et du serveur d'application courant seront copier (en dehors de la webapp pour modifcation sans redéploiement)

  L'exploitation des properties se fait comme suit : 
  
  1/ charge le fichier de configuration de base (property location)
  2/ recherche du fichier de config en fonction de l'environnement (serveur d'application, nom de machine)
  
   Ex : 

pc105 et execution sur websphere avec pour prefix conf/msc => fichier JavaSource/conf/msc-pc105-websphere.properties
pc106 et execution sur jboss     avec pour prefix conf/msc => fichier JavaSource/conf/msc-pc106-jboss.properties   
pc107 et execution sur tomcat (ou autre serveur d'appli que websphere ou jboss)
                                 avec pour prefix conf/msc => fichier JavaSource/conf/msc-pc106.properties

  3/ si exportPath est défini, création du chemin vers exportPath
     si le fichier de properties par machine (ex: msc-pc105-jboss.properties) n'existe pas dans exportPath,
     copie de celui de la webapp dans exportPath.
     
  4/ lorsqu'on recherche une propriété dans un properties, la recherche de la valeur se fait comme suit : 
  
     1/ recherche de la valeur dans exportPath/fichierPropertiesParMachine.properties
       si non trouvé
         2/ recherche de la valeur dans la webapp javaSource/prefix/fichierPropertiesParMachine.properties (dès fois que la version exporté ait été modifié et une valeur supprimée)
           si non trouvé
           3/ recherche de la valeur dans la webapp sur le properties de base 'location' JavaSource/msc.properties.         
-->

  <bean class="fr.croixrouge.utilities.web.conf.PerMachinePropertyPlaceholderConfigurer">
    <property name="prefix"     value="conf/msc"/><!-- fichier de config par marchine dans JavaSource/conf -->
    <property name="exportHostList"> <!-- Sur quelles machines doivent etre exportées les fichiers de conf (pas les machines de developpeur)-->
    	<list>
    		<value>home.paquerette.com</value>
    	</list>
    </property>
    <property name="exportPath" value="/global/data/projects/webapps/TotalMSCOperator/"/> <!-- Fichiers de confs seront exporter a cette endroit et utilisé -->
    <property name="location"   value="classpath:msc.properties"/><!-- fichier de conf par défaut dans JavaSource/msc.properties -->
  </bean>  
  
  
<!-- 
Utilisation : 

un log4.xml de base a mettre dans JavaSource/log4j.xml qui log sur la sortie standard (a récupérer dans les fichiers de log du serveur d'application): 

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

  <appender name="STDOUT" class="org.apache.log4j.ConsoleAppender">
    <layout class="org.apache.log4j.PatternLayout">
      <param name="ConversionPattern" value="%d %p %c : %m%n" />
    </layout>
  </appender>
  
  <logger name="org.apache.struts" additivity="false">
    <level value="info" />
    <appender-ref ref="STDOUT" />
  </logger>
  
  <logger name="org.springframework" additivity="false">
    <level value="info" />
    <appender-ref ref="STDOUT" />
  </logger>
  
  <logger name="fr.rs2i" additivity="false">
    <level value="debug" />
    <appender-ref ref="STDOUT" />
  </logger>
  
  <root>
    <priority value="error" />
    <appender-ref ref="STDOUT" />
  </root>
</log4j:configuration>


puis mettre dans (par ex) JavaSource/conf un fichier log4j par machine
(log4j-pc105.xml) et régler le logger pour chaque machine.

Ex : 
Machine de dev : log en debug sur la sortie standart seulement (pour voir dans la console eclipse)
machine d'intégration : log en debug dans un fichier seulement
Machine de production : log en error dans un fichier seulement

 -->
  <bean       id="Log4JConfigurer" 
           class="fr.croixrouge.utilities.web.conf.PerMachineLog4JConfigurer"
     init-method="init">
    <property name="log4jBasePath"    value="${log4j.log4jBasePath}"  /><!-- ex: conf  => fichier de config par marchine dans JavaSource/conf-->
    <property name="log4jFileBase"    value="${log4j.log4jFileBase}"  /><!-- ex: log4j => nom de base du fichier de configuration pour log4j -->
    <property name="log4jExtension"   value="${log4j.log4jExtension}" /><!-- ex: xml   => extension du fichier de configuration pour log4j -->
    <property name="exportPath"       value="${log4j.exportPath}"     /><!-- Fichiers de confs seront exporter a cette endroit et utilisé (ex:/global/data/projects/webapps/TotalMSCOperator/)-->
    <property name="refreshInterval"  value="${log4j.refreshInterval}"/><!-- si != de 0, log4j vérifiera toutes les X secondes si le fichier de log4j n 'a pas changé -->
  </bean>
<!-- 
recherchera le fichier  
  JavaSource/conf/log4j-HOSTNAME.xml, 
le copiera dans  
  /global/data/projects/webapps/TotalMSCOperator/log4j-HOSTNAME.xml
et initialisera Log4J avec ce fichier /global/data/projects/webapps/TotalMSCOperator/log4j-HOSTNAME.xml
  
  -->
  
  <!-- .... other include .... -->
  
</beans>
 
